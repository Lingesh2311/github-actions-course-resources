name: Demo Project for Job Artifacts & Outputs # Name of the workflow

on: # Define the event that triggers the workflow
  push: # Trigger the workflow on push events
    paths: # Only trigger if changes are made to specific paths
      - 'Code/04 Artifacts & Outputs/01 Starting Project/**' # Path to monitor for changes
    branches: # Only trigger on specific branches
      - main # Branch to monitor for changes
  workflow_dispatch:

jobs: # Define jobs to run in the workflow

  test_stage: # First job: test stage
    runs-on: ubuntu-latest # Use the latest Ubuntu runner
    steps: # Steps to execute in this job
      - name: Get Code # Step to check out the code
        uses: actions/checkout@v4.1.5

      - name: Set up Node.js # Step to set up Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 18 # Specify Node.js version

      - name: Cache dependencies # Step to cache the npm dependencies
        uses: actions/cache@v4.0.2
        with:
          path: ~/.npm # directory that will need to be cached
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }} # builds a hash on all the available package-lock.json files

      - name: Install Dependencies # Step to install dependencies
        run: npm ci
        working-directory: 'Code/04 Artifacts & Outputs/01 Starting Project/' # Change to the specific directory

      - name: Run tests # Step to run tests
        run: npm run test
        working-directory: 'Code/04 Artifacts & Outputs/01 Starting Project/' # Change to the specific directory

  build_stage: # Second job: build stage
    runs-on: ubuntu-latest # Use the latest Ubuntu runner
    needs: test_stage # This job depends on the successful completion of the test_stage
    outputs:
      script-file: ${{ steps.publish.outputs.script-file }} 
    steps: # Steps to execute in this job
      - name: Get code # Step to check out the code
        uses: actions/checkout@v4.1.5

      - name: Set up Node.js # Step to set up Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 18 # Specify Node.js version

      - name: Cache dependencies # Step to cache the npm dependencies
        uses: actions/cache@v4.0.2
        with:
          path: ~/.npm # directory that will need to be cached (will ideally reuse the cache from test_stage job)
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }} # builds a hash on all the available package-lock.json files

      - name: Install Dependencies # Step to install dependencies
        run: npm ci
        working-directory: 'Code/04 Artifacts & Outputs/01 Starting Project/' # Change to the specific directory

      - name: Print working directory before build
        run: pwd
        working-directory: 'Code/04 Artifacts & Outputs/01 Starting Project/'
      
      - name: Build project # Step to build the project
        run: npm run build
        working-directory: 'Code/04 Artifacts & Outputs/01 Starting Project/' # Change to the specific directory

      - name: Print working directory after build
        run: pwd
        working-directory: 'Code/04 Artifacts & Outputs/01 Starting Project/'

      - name: Debug build output # Debug step
        run: |
          echo "Listing build output:"
          ls -R 'Code/04 Artifacts & Outputs/01 Starting Project/dist'
        working-directory: 'Code/04 Artifacts & Outputs/01 Starting Project/'

      - name: Publish JS filename # Step to output the js file name as an output
        id: publish # to access the step id from the steps context
        run: | # sets the output script-file value
          find 'Code/04 Artifacts & Outputs/01 Starting Project/dist/assets' -name '*.js' -type f -exec echo 'script-file={}' >> $GITHUB_OUTPUT ';'
          working-directory: 'Code/04 Artifacts & Outputs/01 Starting Project/'

      - name: Upload artifacts # Step to upload build artifacts
        uses: actions/upload-artifact@v4.3.3
        with:
          name: dist-files # Name of the artifact
          path: |
            Code/04 Artifacts & Outputs/01 Starting Project/dist
            Code/04 Artifacts & Outputs/01 Starting Project/package.json

  deploy_stage: # Third job: deploy stage
    runs-on: ubuntu-latest # Use the latest Ubuntu runner
    needs: build_stage # This job depends on the successful completion of the build_stage
    steps: # Steps to execute in this job
      - name: Get build artifacts
        uses: actions/download-artifact@v4.1.7
        with:
          name: dist-files # This specifies the name of the artifact to download, likely containing the distribution files
      
      - name: Output contents # Name of the output content steps
        run: ls # This step lists the downloaded artifacts for verification purposes
      
      - name: Output filename # Disply the filename which is stored as an output variable
        run: echo "${{ needs.build.outputs }}"
      - name: Deploy # Step to deploy the project
        run: echo "Deploying..." # Placeholder for actual deployment command
